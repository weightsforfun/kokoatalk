#4.0,4.1
transition 은 상태에 따라 바귀는 요소가 있을때 사용함
상태 ex) hover, active, focus ...
ease-in function : 브라우저에게 변화하는 방법을 알려주는 역할
ㄴlinear - 변화 그래프가 직선
ㄴease-in - 시작과 끝이 빠름
ㄴease-out - 시작과 끝이 느림
ㄴease-in-out - 시작이 빠르고 끝이 느림
all : 변화 요소를 한번에 다룬다.
ㄴ따로 다루고 싶으면 각각 써주면 됨

cubic-bezier(0, 0, 0, 0); 으로 직접 설정할수도 있다.

 효과 미리보기 사이트 https://matthewlein.com/tools/ceaser

#4.2
한 요소를 말 그대로 변형시킬수 있기 때문에 개쩐다
css로 3D까지 할수 있기 때문에 cool한것임
transform 안에 엄청나게 많은 기능들이 있다

transformation은 box element를 변형시키지 않는다.
즉, 옆에 sibling들에게 영향을 끼치지 않는다.
margin, padding이 적용되지 않는다. 일종의 3D transformation이기 때문이다.
margin이나 padding을 주기위해서 tarnslateX, trnasLateY 를 사용하는것이 아니다!
다른 요소의 box를 변형시키지 않고 원하는 요소를 이동시키기 위해서 사용하는 것이다.
trransformation 은 페이지의 픽셀의 다른 부분에서 일어난다.
transformatino은 box차원에서 일어나지 않는다.
tronsformation 을 결합 가능하다!
CSS의 3D는 GPU로 돌아간다 즉 3D작업을 할 수 있다
transformation 은 이것 역시 엄청나게 많은 document가 있다 확인해서 combine할 수 있다
transition 과 transformation 을 합친다면 아름다운 애니매이션을 만들 수 있다

요약
애니메이션 만들기
@keyframes 애니메이션 이름 {
from{
}
to {
}
}
사용하기
img {
animation : 애니메이션 이름 재생시간 옵션
}
무한으로 반복되게 하려면 뒤에 infinite를 붙여준다.

#4.4
from to 말고, 1,2,3,4,5...10 혹은 0% 25% 50% 75% 100% 같이 여러 단계로 나뉘어 애니매이션을 만들 수 있다.
- 다른 property들도 애니매이션으로 만들 수 있다. 꼭 transform만 써야하는 건 아니지만, transform을 쓰는걸 권한다. 일부 property는 애니매이션이 잘 안되기 때문이다

Animation Sample Site ( https://animista.net/ )

#4.5

creen and (min-width: npx) and (max-width:npx) and (orientation : landscape혹은portrait) => 스크린 사이즈에 따라서 property 조정 가능함. orientation으로 가로 세로 감지 가능


#4.6
Media Queries 주요기능
- min-device-width
- max-device-width
- orientation: landscape
- orientation: portrait
- aspect-ration - 레티나디스플레이 감지가능
- display-mode
- inverted-colors
- lightlevel
- prefers-contrast
- resolution
- monochrome

Media type
- @media screen{}
- @media print{}

[Using media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries)